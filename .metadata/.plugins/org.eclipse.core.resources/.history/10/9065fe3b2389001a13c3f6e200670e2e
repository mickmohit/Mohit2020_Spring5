package com.example.demo.controller;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.entity.Users;
import com.example.demo.service.UserService;

@RequestMapping("/rest/hello")
@RestController
public class UserController {
	
	@Autowired
    private UserService userService;

	@GetMapping("/all")
    public String hello() {
        return "Hello Youtube";
    }

    @PreAuthorize("hasAnyRole('ADMIN')")
    @GetMapping("/secured/all")
    public String securedHello() {
        return "Secured Hello";
    }

    @GetMapping("/secured/alternate")
    public String alternate() {
        return "alternate";
    }
    
    @RequestMapping(value={"/", "/login"}, method = RequestMethod.GET)
    public ModelAndView login(){
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.setViewName("login");
        return modelAndView;
    }


    @RequestMapping(value="/registration", method = RequestMethod.GET)
    public String registration(Model model){
    	
    	model.addAttribute("user", new Users());
    	System.out.print("Going from 1");
        return "registration";
    }

    @RequestMapping(value = "/registrationProcess", method = RequestMethod.POST)
    public String createNewUser( @ModelAttribute("user")  Users user,
    		BindingResult bindingResult) {
    //	model.addAttribute("users", new Users());
    	System.out.print("entering to 2");
		  //ModelAndView modelAndView = new ModelAndView(); 
		  Optional<Users> userExists =
		  userService.findUserByUserName(user.getName()); 
		  if (userExists != null) 
		  {
		  bindingResult .rejectValue("userName", "error.user",
		  "There is already a user registered with the user name provided"); 
		  } 
		  if(bindingResult.hasErrors())
		  { 
			  return "registration";
		  }
		  else {
			  userService.saveUser(user);
			 
		  } 
        return "redirect:/login";
    }

    
}
